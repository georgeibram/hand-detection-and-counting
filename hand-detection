import skimage.io as io
import numpy as np
import cv2
import imutils
from skimage.feature import canny
def facedetect(img):
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x,y,w,h) in faces:
        img = cv2.rectangle(img,(x,y),(x+w+10,y+h+10),(255,255,255),-1)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return img

def skinmask (frame):

    lower = np.array([0, 48, 80], dtype = "uint8")
    upper = np.array([20, 255, 255], dtype = "uint8")
    frame = imutils.resize(frame, width=400)
    converted = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    skinMask = cv2.inRange(converted, lower, upper)

    # apply a series of erosions and dilations to the mask
    # using an elliptical kernel
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11, 11))
    skinMask = cv2.erode(skinMask, kernel, iterations=0)
    skinMask = cv2.dilate(skinMask, kernel, iterations=0)

    # blur the mask to help remove noise, then apply the
    # mask to the frame
    skinMask = cv2.GaussianBlur(skinMask, (3, 3), 0)
    skin = cv2.bitwise_and(frame, frame, mask=skinMask)
    return np.hstack([frame, skin])
img = io.imread('4.jpg')  
img = facedetect(img)
cv2.imshow('asd', img)
cv2.waitKey(0)  
img = skinmask(img)
cv2.imshow("images", img)
cv2.waitKey(0)
img = cv2.Canny(img, 200,200)
cv2.imshow("images", img)
cv2.waitKey(0)
binary_image = img*(1/255)
dilated = cv2.dilate(binary_image,kernel=np.ones((3,3)),iterations=1)
img = cv2.erode(dilated,kernel=np.ones((3,3)),iterations=2)
cv2.imshow("images", img)
cv2.waitKey(0)
